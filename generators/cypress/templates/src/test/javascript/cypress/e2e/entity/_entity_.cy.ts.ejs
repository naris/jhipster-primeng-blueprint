import {
  entityTableSelector,
  entityDetailsButtonSelector,
  entityDetailsBackButtonSelector,
  <%_ if (!readOnly) { _%>
  entityCreateButtonSelector,
  entityCreateSaveButtonSelector,
  entityCreateCancelButtonSelector,
  entityEditButtonSelector,
  entityDeleteButtonSelector,
  entityConfirmDeleteButtonSelector,
  <%_ } _%>
} from '../../support/entity';
<%_

const baseApi = entityApi + 'api/';

const entityFakeData = generateFakeData('cypress');
const requiredRelationships = relationships.filter(rel => rel.relationshipRequired || rel.id);
let requiredOtherEntities = this._.uniq(requiredRelationships.flatMap(rel => rel.otherEntity.primaryKey.composite ? [...rel.otherEntity.primaryKey.fields.map(f => (f.originalField ?? f).entity).reverse(), rel.otherEntity] : [rel.otherEntity]));
let newEntities;
do {
  newEntities = requiredOtherEntities.flatMap(e => e.relationships.filter(rel => (rel.relationshipRequired || rel.id) && !requiredOtherEntities.includes(rel.otherEntity)).flatMap(rel => rel.otherEntity.primaryKey.composite ? [...rel.otherEntity.primaryKey.fields.map(f => (f.originalField ?? f).entity).reverse(), rel.otherEntity] : [rel.otherEntity])).filter(e => !requiredOtherEntities.includes(e));
  requiredOtherEntities.unshift(...newEntities);
} while (newEntities.length > 0);
const otherEntities = this._.uniq(Object.values(differentRelationships).filter(rels => rels.length > 0).map(rels => rels[0].otherEntity));
const importUser = requiredOtherEntities.some(e => e.name === 'User');
if (importUser) {
    requiredOtherEntities.splice(requiredOtherEntities.findIndex(e => e.name === 'User'), 1);
    if (newEntities.some(e => e.name === 'User')) {
        newEntities.splice(newEntities.findIndex(e => e.name === 'User'), 1);
    }
}
// We cannot generate a required entity with relationship with required relationships.
const skipCreateTest =
  // (
  //   !cypressBootstrapEntities ||
  //   requiredRelationships.some(rel => rel.otherEntity.primaryKey && rel.otherEntity.primaryKey.derived) ||
  //   requiredRelationships.some(rel => rel.otherEntity.builtInUser || rel.otherEntity === this.entity) ||
  //   requiredRelationships.map(rel => rel.otherEntity.relationships).flat().some(rel => rel.relationshipRequired) ||
  //   !entityFakeData
  // ) ? '.skip' : '';
'';

const sampleFields = fields.filter(f => !f.autoGenerate && (f.id || !f.nullable));

if (workaroundEntityCannotBeEmpty && sampleFields.length === 0) {
  const sample = fields.find(f => !f.autoGenerate);
  if (sample) {
    sampleFields.push(sample);
  }
} else if (workaroundInstantReactiveMariaDB) {
  const samples = fields.filter(f => !f.autoGenerate && f.nullable && f.fieldType === 'Instant');
  if (samples.length > 0) {
    sampleFields.push(...samples);
  }
}
_%>

describe('<%= entityClass %> e2e test', () => {

  const <%= entityInstance %>PageUrl = '/<%= entityPage %>';
  const <%= entityInstance %>PageUrlPattern = new RegExp('/<%= entityPage %>(\\?.*)?$');
  const username = Cypress.env('E2E_USERNAME') ?? 'user';
  const password = Cypress.env('E2E_PASSWORD') ?? 'user';
  <% if (skipCreateTest) { %>// <% } %>const <%= entityInstance %>Sample = <%- JSON.stringify(this.generateTestEntity(sampleFields.map(field => field.reference))) %>;

  let <%= entityInstance %>;
  <%_ if (importUser) { _%>
  let user;
  <%_ } _%>
<%_ for (otherEntity of requiredOtherEntities) { _%>
  <% if (skipCreateTest) { %>// <% } %>let <%= otherEntity.entityInstance %>;
<%_ } _%>

  beforeEach(() => {
    cy.login(username, password);
  });

<%_ if (requiredOtherEntities.length > 0 || importUser) { _%>
  <%_ if (skipCreateTest) { _%>
  /* Disabled due to incompatibility
  <%_ } _%>

  // create an instance at the required relationship entities
  <%_ if (importUser) { _%>
  beforeEach(() => {
    cy.authenticatedRequest({
      method: 'GET',
      url: '/api/account',
    }).then(({ body }) => {
      user = body;
    });
  });
  <%_ } _%>
  <%_ for (otherEntity of requiredOtherEntities) { _%>
  beforeEach(() => {
    cy.authenticatedRequest({
      method: 'POST',
      url: '/<%= baseApi + otherEntity.entityApiUrl %>',
      body: <%- JSON.stringify(this.generateTestEntity(otherEntity.fields.filter(f => !f.autoGenerate).map(field => field.reference))).slice(0, -1) + ', ' +
    otherEntity.relationships.filter(r => r.id || r.relationshipRequired).map(r => `${r.relationshipName}: ${r.otherEntity.entityInstance}`).join(', ') + '}' %>,
    }).then(({ body }) => {
      <%= otherEntity.entityInstance %> = body;
    });
  });
  <%_ } _%>
  <%_ if (skipCreateTest) { _%>
   */
  <%_ } _%>

<%_ } _%>
  beforeEach(() => {
    cy.intercept('GET', '/<%= baseApi + entityApiUrl %>+(?*|)').as('entitiesRequest');
    cy.intercept('POST', '/<%= baseApi + entityApiUrl %>').as('postEntityRequest');
    cy.intercept('DELETE', '/<%= baseApi + entityApiUrl %>/*').as('deleteEntityRequest');
  });

<%_ if (requiredOtherEntities.length > 0) { _%>
  <%_ if (skipCreateTest) { _%>
  /* Disabled due to incompatibility
  <%_ } _%>
  beforeEach(() => {
    // Simulate relationships api for better performance and reproducibility.
  <%_ for (otherEntity of otherEntities) { _%>
    cy.intercept('GET', '/<%= baseApi + otherEntity.entityApiUrl %>', {
      statusCode: 200,
      body: [<%= (requiredOtherEntities.includes(otherEntity) || otherEntity.name === 'User') ? otherEntity.entityInstance : '' %>],
    });

  <%_ } _%>
  });
  <%_ if (skipCreateTest) { _%>
   */
  <%_ } _%>

<%_ } _%>
  afterEach(() => {
    if (<%= entityInstance %>) {
      cy.authenticatedRequest({
        method: 'DELETE',
        url: `/<%= baseApi + entityApiUrl %>/<% if (primaryKey.fields.length === 1) { %>${<%= entityInstance %>.<%= primaryKey.name %>}<% } else { %><%- primaryKey.fields.map(field => `${field.fieldName}=\${${entityInstance}.${field.fieldNameDotted}}`).join(';') %><% } %>`,
      }).then(() => {
        <%= entityInstance %> = undefined;
      });
    }
  });

<%_ if (requiredOtherEntities.length > 0) { _%>
  <%_ if (skipCreateTest) { _%>
  /* Disabled due to incompatibility
  <%_ } _%>
  afterEach(() => {
  <%_ for (otherEntity of [...requiredOtherEntities].reverse()) { _%>
    if (<%= otherEntity.entityInstance %>) {
      cy.authenticatedRequest({
        method: 'DELETE',
        url: `/<%= baseApi + otherEntity.entityApiUrl %>/<% if (otherEntity.primaryKey.fields.length === 1) { %>${<%= otherEntity.entityInstance %>.<%= otherEntity.primaryKey.name %>}<% } else { %><%- otherEntity.primaryKey.fields.map(field => `${field.fieldName}=\${${otherEntity.entityInstance}.${field.fieldNameDotted}}`).join(';') %><% } %>`,
      }).then(() => {
        <%= otherEntity.entityInstance %> = undefined;
      });
    }
  <%_ } _%>
  });
  <%_ if (skipCreateTest) { _%>
   */
  <%_ } _%>

<%_ } _%>

  it('<%= entityClassPlural %> menu should load <%= entityClassPlural %> page', () => {
    cy.visit('/');
    cy.clickOnEntityMenuItem('<%= entityPage %>');
    cy.wait('@entitiesRequest').then(({ response }) => {
      if (response.body.length === 0) {
        cy.get(entityTableSelector).should('not.exist');
      } else {
        cy.get(entityTableSelector).should('exist');
      }
    });;
    cy.getEntityHeading('<%= entityClass %>').should('exist');
    cy.url().should('match', <%= entityInstance %>PageUrlPattern);
  });

  describe('<%= entityClass %> page', () => {
<%_ if (!readOnly) { _%>
    describe('create button click', () => {
      beforeEach(() => {
        cy.visit(<%= entityInstance %>PageUrl);
        cy.wait('@entitiesRequest');
      });

      it('should load create <%= entityClass %> page', () => {
        cy.get(entityCreateButtonSelector).click();
        cy.url().should('match', new RegExp('/<%= entityPage %>/new$'));
        cy.getEntityCreateUpdateHeading('<%= entityClass %>');
        cy.get(entityCreateSaveButtonSelector).should('exist');
        cy.get(entityCreateCancelButtonSelector).click();
        cy.wait('@entitiesRequest').then(({ response }) => {
          expect(response.statusCode).to.equal(200);
        });
        cy.url().should('match', <%= entityInstance %>PageUrlPattern);
      });
    });

<%_ } _%>
    describe('with existing value', () => {
<% if (!readOnly) { %>
  <%_ if (skipCreateTest) { _%>
      /* Disabled due to incompatibility
  <%_ } _%>
      beforeEach(() => {
        cy.authenticatedRequest({
          method: 'POST',
          url: '/<%= baseApi + entityApiUrl %>',
  <%_ if (requiredRelationships.length > 0) { _%>
          body: {
            ...<%= entityInstance %>Sample,
    <%_ for (relationship of requiredRelationships) { _%>
            <%= relationship.relationshipName %>: <%= relationship.otherEntity.entityInstance %>,
    <%_ } _%>
          },
  <%_ } else { _%>
          body: <%= entityInstance %>Sample,
  <%_ } _%>
        }).then(({ body }) => {
          <%= entityInstance %> = body;

          cy.intercept(
            {
              method: 'GET',
              url: '/<%= baseApi + entityApiUrl %>+(?*|)',
              times: 1,
            },
            {
              statusCode: 200,
  <%_ if (!paginationNo) { _%>
              headers: {
                link: '<http://localhost/<%= baseApi + entityApiUrl %>?page=0&size=20>; rel="last",<http://localhost/<%= baseApi + entityApiUrl %>?page=0&size=20>; rel="first"',
              },
  <%_ } _%>
              body: [<%= entityInstance %>],
            }
          ).as('entitiesRequestInternal');
        });

        cy.visit(<%= entityInstance %>PageUrl);

        cy.wait('@entitiesRequestInternal');
      });
  <%_ if (skipCreateTest) { _%>
       */

  <%_ } _%>
<%_ } _%>
<%_ if (readOnly || skipCreateTest) { _%>
      beforeEach(function () {
        cy.visit(<%= entityInstance %>PageUrl);

        cy.wait('@entitiesRequest').then(({ response }) => {
          if (response.body.length === 0) {
            this.skip();
          }
        });
      });
<%_ } _%>

      it('detail button click should load details <%= entityClass %> page', () => {
        cy.get(entityDetailsButtonSelector).first().click();
        cy.getEntityDetailsHeading('<%= entityInstance %>');
        cy.get(entityDetailsBackButtonSelector).click();
        cy.wait('@entitiesRequest').then(({ response }) => {
          expect(response.statusCode).to.equal(200);
        });
        cy.url().should('match', <%= entityInstance %>PageUrlPattern);
      });

<%_ if (!readOnly) { _%>
      it('edit button click should load edit <%= entityClass %> page and go back', () => {
        cy.get(entityEditButtonSelector).first().click();
        cy.getEntityCreateUpdateHeading('<%= entityClass %>');
        cy.get(entityCreateSaveButtonSelector).should('exist');
        cy.get(entityCreateCancelButtonSelector).click();
        cy.wait('@entitiesRequest').then(({ response }) => {
          expect(response.statusCode).to.equal(200);
        });
        cy.url().should('match', <%= entityInstance %>PageUrlPattern);
      });

      it('edit button click should load edit <%= entityClass %> page and save', () => {
        cy.get(entityEditButtonSelector).first().click();
        cy.getEntityCreateUpdateHeading('<%= entityClass %>');
        cy.get(entityCreateSaveButtonSelector).click();
        cy.wait('@entitiesRequest').then(({ response }) => {
          expect(response.statusCode).to.equal(200);
        });
        cy.url().should('match', <%= entityInstance %>PageUrlPattern);
      });

      it<%= skipCreateTest %>('last delete button click should delete instance of <%= entityClass %>', () => {
  <%_ if (clientFrameworkReact) { _%>
        cy.intercept('GET', '/<%= baseApi + entityApiUrl %>/*').as('dialogDeleteRequest');
  <%_ } _%>
        cy.get(entityDeleteButtonSelector).last().click();
  <%_ if (clientFrameworkReact) { _%>
        cy.wait('@dialogDeleteRequest');
  <%_ } _%>
        cy.getEntityDeleteDialogHeading('<%= entityInstance %>').should('exist');
        cy.get(entityConfirmDeleteButtonSelector).click();
        cy.wait('@deleteEntityRequest').then(({ response }) => {
          expect(response.statusCode).to.equal(204);
        });
        cy.wait('@entitiesRequest').then(({ response }) => {
          expect(response.statusCode).to.equal(200);
        });
        cy.url().should('match', <%= entityInstance %>PageUrlPattern);
  <% if (cypressBootstrapEntities) { %>
        <%= entityInstance %> = undefined;
  <%_ } _%>
      });
<%_ } _%>
    });
  });
<%_ if (!readOnly) { _%>

  describe('new <%= entityClass %> page', () => {
    beforeEach(() => {
      cy.visit(`${<%= entityInstance %>PageUrl}`);
      cy.get(entityCreateButtonSelector).click();
      cy.getEntityCreateUpdateHeading('<%= entityClass %>');
    });

    it<%= skipCreateTest %>('should create an instance of <%= entityClass %>', () => {

  <%_ fields.filter(field => (!field.id || !field.autoGenerate) && !field.hidden && !field.readonly).forEach((field) => {
    const fieldName = field.fieldName;
    const fieldIsEnum = field.fieldIsEnum;
    let fieldValue = undefined;
    if (field.fieldType === 'LocalDate') {
      fieldValue = '10/20/2020';
    } else if (['Instant', 'ZonedDateTime'].includes(field.fieldType)) {
        fieldValue = '10/20/2020 10:10';
    } else {
      fieldValue = !entityFakeData ? field.generateFakeData('cypress') : entityFakeData[field.fieldName];
    }
    if (fieldValue === undefined) {
        this.warning(`Error generating a value for field ${fieldName}`);
        return;
    }
  _%>

    <%_ if (field.fieldTypeBoolean) { _%>
      cy.get(`[data-cy="<%= fieldName %>"] > .p-inputswitch-checked`).should('not.exist');
      cy.get(`[data-cy="<%= fieldName %>"]`).click();
      cy.get(`[data-cy="<%= fieldName %>"] > .p-inputswitch-checked`).should('exist');

    <%_ } else if (field.fieldTypeBinary && !field.blobContentTypeText) { _%>
      cy.setFieldImageAsBytesOfEntity('<%= fieldName %>', 'integration-test.png', 'image/png');

    <%_ } else if (fieldIsEnum) { _%>
      cy.setFieldSelectToLastOfEntity('<%= fieldName %>');

    <%_ } else if (field.fieldTypeString || field.fieldTypeNumeric) { _%>
      cy.get(`[data-cy="<%= fieldName %>"]`).type('<%= fieldValue %>');
      cy.get(`[data-cy="<%= fieldName %>"]`).should('have.value', '<%= fieldValue %>');

    <%_ } else if (field.fieldTypeLocalDate || field.fieldTypeTimed || field.fieldTypeDuration) { _%>
      cy.get(`[data-cy="<%= fieldName %>"] input`).clear();
      cy.get(`[data-cy="<%= fieldName %>"] input`).type('<%= fieldValue %>');
      cy.get(`[data-cy="<%= fieldName %>"] input`).type('{esc}');
      cy.get(`[data-cy="<%= fieldName %>"] input`).should('have.value', '<%= fieldValue %>');

    <%_ } else { _%>
      cy.get(`[data-cy="<%= fieldName %>"]`).type('<%= fieldValue %>');
      cy.get(`[data-cy="<%= fieldName %>"]`).invoke('val').should('match', new RegExp('<%= fieldValue %>'));

    <%_ } _%>
  <%_ }); _%>
  <%_ for (relationship of requiredRelationships) {
    const ownerSide = relationship.ownerSide;
    const relationshipName = relationship.relationshipName;
  _%>
       <%_ relationship.clientFields.forEach(cf => { _%>
      <%_ if (relationship.relationshipManyToOne || relationship.relationshipOneToOne) { _%>
        cy.setFieldSelectToLastOfEntity('<%= cf.fullPath[cf.fullPath.length -2] %>');
      <%_ } else if(relationship.relationshipManyToMany) { _%>
        cy.setFieldSelectToLastOfEntity('<%= cf.fullPath[cf.fullPath.length -2] %>', true, ' ');
      <%_ } _%>
    <%_}) _%>
  <%_ } _%>

  <%_ if (anyFieldIsBlobDerived) { _%>
      // since cypress clicks submit too fast before the blob fields are validated
      cy.wait(200); // eslint-disable-line cypress/no-unnecessary-waiting
  <%_ } _%>
      cy.get(entityCreateSaveButtonSelector).click();

      cy.wait('@postEntityRequest').then(({ response }) => {
        expect(response.statusCode).to.equal(201);
        <%= entityInstance %> = response.body;
      });
      cy.wait('@entitiesRequest').then(({ response }) => {
        expect(response.statusCode).to.equal(200);
      });
      cy.url().should('match', <%= entityInstance %>PageUrlPattern);
    });
  });
<%_ } _%>
});
