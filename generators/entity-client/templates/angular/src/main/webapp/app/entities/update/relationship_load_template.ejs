<%_
// the dropdowns can be seen as the nodes of a tree, where the root is the entity we are trying to create the dropdown for
// the nodes are the primaryKey.fields of that entity (some do not contain fields)
// and the edges are the id relationships that lead to building the primaryKey
// To query each dropdown based on the previously selected ones, we do a depth first tree traversal using relationship.clientFields that have a reverse order of primaryKey.fields
//
_%>

<%_ relationship.clientFields.forEach((cf, i) => { _%>
    <%_
        // we want to be able to filter for all dropdowns after the first one, to allow only for possible selection
        // if the first dropdown

        // we can only afford to load all at once if:
        // 1- we are in the first dropdown and we will show all choices (because no pagination) and filer locally
        // 2- after the first one:
        //      2.1- filter (with and without pagination): we want to filter to allow only possible choices
        //      2.2- no filter no pagination => loadAll
        //      2.3- no filter pagination => loadAll to at least be possible to filter locally (this should never happen)
    _%>
    <%_ if ((i === 0 && cf.entity.pagination === 'no') || !cf.entity.jpaMetamodelFiltering) { _%>
    loadAll<%= cf.nameCapitalizedPlural %>(): void {
            <%_ if (cf.lastRelationship.relationshipOneToOne) { _%>
        // TODO change this to load only unspecified + add selected to options if on edit (not create)
            <%_ } _%>
        this.<%= cf.entity.entityInstance %>Service.query()
            .subscribe((res: HttpResponse<I<%= cf.entity.entityAngularName %>[]>) => this.<%= cf.name %>Options = res.body);
    }
    <%_ } else { _%>
    on<%= cf.nameCapitalized %>LazyLoadEvent(event: DropdownFilterEvent): void {
        <%_ if (cf.lastRelationship.relationshipOneToOne) { _%>
        // TODO change this to load only unspecified + add selected to options if on edit (not create)
        <%_ } _%>
        <%_ if (i > 0) { _%>
        if (<%- relationship.clientFields.slice(0, i).map(previousCf => previousCf.needsFieldName ? `this.${previousCf.formName}.controls.${previousCf.fieldName}.value` : `this.${previousCf.parentFormName}.controls.${previousCf.lastRelationship.relationshipName}.value`).join(' && ') %>) {
        <%_ } _%>
            this.<%= cf.name %>OptionsSubscriber!.filter({ first: event.first, last: event.last, '<%= cf.lastRelationship.relatedField.fieldName %>.<%= cf.relatedFieldMatchMode %>': event.filter,
        <%_ if (i > 0) { _%>
        <%_
            relationship.clientFields.slice(0, i).forEach(previousCf => {
                let commonDepth = 0;
                for (let j = 0; j < cf.id.relationshipsPath.length; j++) {
                    if (cf.id.relationshipsPath[j].relationshipName !== previousCf.id.relationshipsPath[j].relationshipName) {
                        break;
                    } else {
                        commonDepth = j + 1;
                    }
                }
                let stepsBack = cf.id.relationshipsPath.length - commonDepth;
                let criteria = '';
                if (!stepsBack) {
                  criteria = this._.lowerFirst([...previousCf.id.relationshipsPath.slice(commonDepth).map(r => r.relationshipNameCapitalized), previousCf.id.originalField.fieldNameCapitalized].join(''))
                } else {
                  criteria = this._.lowerFirst([...cf.id.relationshipsPath.slice(0, stepsBack).map(r => r.otherEntityRelationshipNameCapitalized).reverse(), ...previousCf.id.relationshipsPath.slice(commonDepth, previousCf.id.relationshipsPath.length).map(r => r.relationshipNameCapitalized), previousCf.id.originalField.fieldNameCapitalized].join(''))
                }
            _%>
                    '<%= criteria %>.equals': <%- previousCf.needsFieldName ? `this.${previousCf.formName}.controls.${previousCf.fieldName}.value` : `this.${previousCf.parentFormName}.controls.${previousCf.lastRelationship.relationshipName}.value.${previousCf.fieldName}` %>,
            <%_ }) _%>
        <%_ } _%>
            });
        <%_ if (i > 0) { _%>
        } else {
            this.<%= cf.name %>OptionsSubscriber!.options = null;
        }
        <%_ } _%>
    }
    <%_ } _%>
<%_ }) _%>
