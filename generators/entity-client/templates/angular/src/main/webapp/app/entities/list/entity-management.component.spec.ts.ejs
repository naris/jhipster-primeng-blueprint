<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const tsKeyId = primaryKey.fields.map(field => this.generateTestEntityId(field.fieldType)).join(', ');
const entityArrayOptionalChainSymbol = pagination === 'infinite-scroll' ? '' : '?.';
const testEntity = this._generateTestEntityPrimaryKey(primaryKey, 0);
let datePipe = false;
if (jpaMetamodelFiltering && fields.some(f => ['LocalDate', 'Instant', 'ZonedDateTime'].includes(f.fieldType))) {
    datePipe = true;
}
else if (jpaMetamodelFiltering) {
    for (const relationship of relationships) {
        if(relationship.otherEntity.fields.some(f => ['LocalDate', 'Instant', 'ZonedDateTime'].includes(f.fieldType))) {
            datePipe = true;
        }
        break;
    }
}
_%>

import { ComponentFixture, TestBed, fakeAsync<%_ if (pagination !== 'no') { _%>, tick<%_ } _%> } from '@angular/core/testing';
import { of<%_ if (pagination !== 'no') { _%>, BehaviorSubject<%_ }_%> } from 'rxjs';
import { HttpResponse } from '@angular/common/http';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { <% if (!readOnly) { %>Confirmation, ConfirmationService, <% } %>MessageService } from 'primeng/api';
<%_ if (pagination !== 'no') { _%>
import { ActivatedRoute, Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
<%_ } else if (searchEngine !== false) { _%>
import { ActivatedRoute } from '@angular/router';
<%_ } _%>
<%_ if (enableTranslation) { _%>
import { TranslateModule } from '@ngx-translate/core';
<%_ } _%>
<%_ if (pagination !== 'no') {_%>
import { Table } from 'primeng/table';
<%_ } _%>
<%_ if (datePipe) { _%>
import { DatePipe } from '@angular/common';
<%_ } _%>

import { <%= entityAngularName %>Component } from './<%= entityFileName %>.component';
import { <%= entityAngularName %>Service } from '../service/<%= entityFileName %>.service';

describe('Component Tests', () => {
    describe('<%= entityAngularName %> Management Component', () => {
        let comp: <%= entityAngularName %>Component;
        let fixture: ComponentFixture<<%= entityAngularName %>Component>;
        let service: <%= entityAngularName %>Service;
<%_ if (!readOnly) { _%>
        let confirmationService: ConfirmationService;
<%_ } _%>
<%_ if (pagination !== 'no') { _%>
        let activatedRoute: ActivatedRoute;
        let router: Router;
<%_ } _%>

        beforeEach(() => {
            TestBed.configureTestingModule({
                imports: [HttpClientTestingModule<% if (enableTranslation) { %>, TranslateModule.forRoot()<% } %><% if (pagination !== 'no') { %>, RouterTestingModule.withRoutes([])<% } %>],
                declarations: [<%= entityAngularName %>Component],
                providers: [
<%_ if (!readOnly) { _%>
                    ConfirmationService,
<%_ } _%>
                    MessageService,
                    <%_ if (pagination !== 'no') { _%>
                    {
                        provide: ActivatedRoute,
                        useValue: { data: of(), queryParams: new BehaviorSubject({})}
                    },
                <%_ } else if (searchEngine !== false) { _%>
                    {
                        provide: ActivatedRoute,
                        useValue: { data: of(), queryParams: new BehaviorSubject({})}
                    },
                    <%_ } _%>
                    <%_ if (datePipe) { _%>
                    DatePipe,
                <%_ } _%>
                ]
            })
            .overrideTemplate(<%= entityAngularName %>Component, '')
            .compileComponents();

            fixture = TestBed.createComponent(<%= entityAngularName %>Component);
            comp = fixture.componentInstance;
            service = TestBed.inject(<%= entityAngularName %>Service);
<%_ if (!readOnly) { _%>
            confirmationService = TestBed.inject(ConfirmationService);
<%_ } _%>
<%_ if (pagination !== 'no') { _%>
            activatedRoute = TestBed.inject(ActivatedRoute);
            router = TestBed.get(Router);
            jest.spyOn(router, 'navigate').mockImplementation()
<%_ } _%>

<%_ if (pagination !== 'no') { _%>
            comp.<%= entityInstance %>Table = {filters: {}, createLazyLoadMetadata: () => undefined} as Table;
<%_ } _%>
        });

        it('Should call load all on init', fakeAsync(() => {
            // GIVEN
            jest.spyOn(service, 'query').mockReturnValue(of(new HttpResponse({
                body: [<%- testEntity %>]
            }) as any));

            // WHEN
            fixture.detectChanges();

            // THEN
            expect(service.query).toHaveBeenCalled();
            expect(comp.<%= entityInstancePlural %><%= entityArrayOptionalChainSymbol %>[0]).toEqual(expect.objectContaining(<%- testEntity %>));
        }));

<%_ if (pagination !== 'no') { _%>

        it('should load a page', fakeAsync(() => {
            // GIVEN
            jest.spyOn(service, 'query').mockReturnValue(
                of(
                    new HttpResponse({
                        body: [<%- testEntity %>]
                    })
                )
            );

            // WHEN
            fixture.detectChanges();
            tick(100);
            (activatedRoute.queryParams as BehaviorSubject<any>).next({ first: 3});

            // THEN
            expect(service.query).toHaveBeenCalled();
            expect(comp.<%= entityInstancePlural %><%= entityArrayOptionalChainSymbol %>[0]).toEqual(expect.objectContaining(<%- testEntity %>));
        }));
<%_ } _%>
<%_ if (!readOnly) { _%>

        it('should call delete service using confirmDialog', fakeAsync(() => {
            // GIVEN
            jest.spyOn(service, 'delete').mockReturnValue(of({} as any));
            jest.spyOn(confirmationService, 'confirm').mockImplementation((confirmation: Confirmation) => {
                if(confirmation.accept) {
                    confirmation.accept()
                }
                return confirmationService;
        });

            // WHEN
            comp.delete(<%- tsKeyId %>);

            // THEN
            expect(confirmationService.confirm).toHaveBeenCalled();
            expect(service.delete).toHaveBeenCalledWith(<%- tsKeyId %>);
        }));
<%_ } _%>
    });
});
