<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const hasPaginationRelationship = relationships.some(r => r.ownerSide && r.clientFields.some(cf => cf.lastRelationship.otherEntity.pagination !== 'no'));
_%>
import { Component, OnInit, ViewChild<% if (hasPaginationRelationship) { %>, OnDestroy<% } %> } from '@angular/core';
import { HttpErrorResponse, <%_ if (pagination !== 'no') { _%>HttpHeaders, <% } %>HttpResponse } from '@angular/common/http';
<%_ if (pagination === 'pagination' || pagination === 'pager') { _%>
import { ActivatedRoute, Router } from '@angular/router';
<%_ } else if (searchEngine !== false) { _%>
import { ActivatedRoute } from '@angular/router';
<%_ } _%>
<%_ if (hasPaginationRelationship) { _%>
import { LazySubscriber, DropdownFilterEvent } from 'app/core/request/lazy-subscriber';
<%_ } _%>
import { Subscription<% if (hasPaginationRelationship) { %>, ReplaySubject<% } %> } from 'rxjs';
import { filter<% if (pagination !== 'no') { %>, tap, switchMap<% } else { %>, map<% } %> } from 'rxjs/operators';
import { FilterMetadata, MessageService } from 'primeng/api';
import { I<%= entityAngularName %> } from '../<%= entityFileName %>.model';
<%_
if ( jpaMetamodelFiltering) {
    const enumOptions = [];
    fields.forEach(field => {
        if (field.fieldIsEnum && !enumOptions.includes(field.fieldType)) {
            enumOptions.push(field.fieldType);
        }
    });
    enumOptions.forEach(e => { _%>
import { <%= e %>, <%= this._.snakeCase(e).toUpperCase() %>_ARRAY } from 'app/entities/enumerations/<%= this._.kebabCase(e) %>.model';
    <%_ }); _%>
<%_ } _%>
import { <%= entityAngularName %>Service } from '../service/<%= entityFileName %>.service';
<%_ if (pagination !== 'no') { %>
import { ITEMS_PER_PAGE } from 'app/config/pagination.constants';
<%_ } _%>
<%_ if (pagination !== 'no' || (jpaMetamodelFiltering && relationships.some(r => r.ownerSide && r.otherEntity.pagination !== 'no'))) { _%>
<% if (pagination !== 'no') {%>import { lazyLoadEventToServerQueryParams, lazyLoadEventToRouterQueryParams, fillTableFromQueryParams } from 'app/core/request/request-util';<% } %>
<%_ } _%>
<%_ if (!readOnly || (pagination !== 'no' || (jpaMetamodelFiltering && relationships.some(r => r.ownerSide && r.otherEntity.pagination !== 'no')))) { _%>
import { <% if (!readOnly) { %>ConfirmationService, <% } %><% if (pagination !== 'no') { %>LazyLoadEvent<% } %> } from 'primeng/api';
<%_ } _%>
import { TranslateService } from '@ngx-translate/core';
<%_ if(jpaMetamodelFiltering) { _%>
    <%_ const alreadyImported = new Set([name]) _%>
    <%_ for (const relationship of relationships) { _%>
        <%_ if (relationship.ownerSide) { _%>
            <%_ relationship.otherEntity.primaryKey.fields.forEach(field => { _%>
                <%_ if(!alreadyImported.has(field.entity.name)) { _%>
                    <%_ alreadyImported.add(field.entity.name); _%>
import { I<%= field.entity.entityAngularName %> } from 'app/entities/<%= field.entity.entityFolderName %>/<%= field.entity.entityFileName %>.model';
                    <%_ if(relationship.otherEntity.name === 'User') { _%>
import { UserService } from 'app/entities/user/user.service';
                    <%_ } else {_%>
import { <%= field.entity.entityAngularName%>Service } from 'app/entities/<%= field.entity.entityFolderName %>/service/<%= field.entity.entityFileName %>.service';
                    <%_ } _%>
                <%_ } _%>
            <%_ }) _%>
        <%_ } _%>
    <%_ } _%>
<%_ } _%>
import { Table } from 'primeng/table';
<%_ if (fieldsContainBlob) { _%>
import { DataUtils } from 'app/core/util/data-util.service';
<%_ } _%>
<%_ if(jpaMetamodelFiltering && fields.some(f => ['LocalDate', 'Instant', 'ZonedDateTime'].includes(f.fieldType))){ _%>
import { DatePipe } from '@angular/common';
<%_ } _%>

@Component({
    selector: '<%= jhiPrefixDashed %>-<%= entityFileName %>',
    templateUrl: './<%= entityFileName %>.component.html'
})
export class <%= entityAngularName %>Component implements OnInit<% if (hasPaginationRelationship) { %>, OnDestroy<% } %> {
    <%= entityInstancePlural %>?: I<%= entityAngularName %>[];
    eventSubscriber?: Subscription;
<%_ if (jpaMetamodelFiltering) {
    for (const field of fields) {
        if(field.fieldIsEnum) {_%>
    <%= field.fieldName %>Options = <%= this._.snakeCase(field.fieldType).toUpperCase() %>_ARRAY.map((s: <%=field.fieldType%>) => ({ label: s.toString(), value: s }));
        <%_ } _%>
    <%_ } _%>
    <%_ for (const relationship of relationships) { _%>
        <%_ if (relationship.ownerSide) { _%>
            <%_ relationship.clientFields.forEach(cf => { _%>
                <%_ if (cf.lastRelationship.otherEntity.pagination !== 'no') { _%>
    <%= cf.name %>OptionsSubscriber?: LazySubscriber<I<%= cf.entity.name %>>;
                <%_ } else { _%>
    <%= cf.name %>Options: I<%= cf.entity.name %>[] | null = null;
                <%_ } _%>
                <%_ if ((relationship.relationshipManyToMany && pagination === 'no' && !relationship.otherEntity.primaryKey.composite && relationship.otherEntity.entityClass !== 'User') ||
                        relationship.relationshipType !== 'many-to-many') { _%>
    <%= cf.name %>SelectedOptions: I<%= cf.entity.name %>[] | null = null;
                <%_ } _%>
            <%_ }) _%>
        <%_ } _%>
    <%_ } %>
<%_ } _%>
<%_ if (pagination !== 'no') { _%>
    totalItems?: number;
    itemsPerPage!: number;
    loading!: boolean;

<%_ } _%>
    @ViewChild('<%= entityInstance %>Table', { static: true })
    <%= entityInstance %>Table!: Table;

    private filtersDetails: { [_: string]: { type: string } } = {
<%_ for ( const field of fields ) {
    if (field.fieldIsEnum) { _%>
        <%= field.fieldName %>: {type: 'string'},
    <%_ } else if (field.fieldType === 'String') { _%>
        <%= field.fieldName %>: {type: 'string'},
    <%_ } else if (['Instant', 'ZonedDateTime'].includes(field.fieldType)) { _%>
        <%= field.fieldName %>: {type: 'dateTime'},
    <%_ } else if (field.fieldType === 'LocalDate') { _%>
        <%= field.fieldName %>: {type: 'date'},
    <%_ } else if (field.fieldType === 'Boolean') { _%>
        <%= field.fieldName %>: {type: 'boolean'},
    <%_ } else if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal', 'Duration'].includes(field.fieldType)) {  _%>
        <%= field.fieldName %>: {type: 'number'},
    <%_ } _%>
<%_ } _%>
<%_ for ( const relationship of relationships ) { _%>
    <%_ if (relationship.ownerSide) { _%>
        <%_ relationship.clientFields.forEach(cf => { _%>
        ['<%= relationship.relationshipFieldName + cf.id.fieldNameCapitalized %>']: {type: <% if(['Integer', 'Long', 'Float', 'Double', 'BigDecimal', 'Duration'].includes(cf.id.fieldType)) { %>'number'<% } else { %>'string'<% } %>},
        <%_ }) _%>
    <%_ } _%>
<%_ } _%>
    };
<%_ if (hasPaginationRelationship) { _%>
    private onDestroySubject = new ReplaySubject(1);
<%_ } _%>

    constructor(
        protected <%= entityInstance %>Service: <%= entityAngularName %>Service,
<%_ if(jpaMetamodelFiltering){ _%>
    <%_ const alreadyInConstructor = new Set([name]) _%>
    <%_ for (const relationship of relationships) { _%>
        <%_ if (relationship.ownerSide) { _%>
            <%_ relationship.clientFields.forEach(cf => { _%>
                <%_ if(!alreadyInConstructor.has(cf.entity.name)) { _%>
                    <%_ alreadyInConstructor.add(cf.entity.name); _%>
        protected <%= this._.lowerFirst(cf.entity.name) %>Service: <%= cf.entity.entityAngularName %>Service,
                <%_ } _%>
            <%_ }) _%>
        <%_ } _%>
    <%_ } _%>
<%_ } _%>
        protected messageService: MessageService,
        <%_ if (fieldsContainBlob) { _%>
        protected dataUtils: DataUtils,
        <%_ } _%>
<%_ if (pagination !== 'no') { _%>
        protected activatedRoute: ActivatedRoute,
        protected router: Router,
<%_ } _%>
<%_ if (!readOnly) { _%>
        protected confirmationService: ConfirmationService,
<%_ } _%>
        protected translateService: TranslateService,
        <%_ if(jpaMetamodelFiltering && fields.some(f => ['LocalDate', 'Instant', 'ZonedDateTime'].includes(f.fieldType))){ _%>
        protected datePipe: DatePipe,
        <%_ } _%>
    ) {
        <%_ if (pagination !== 'no') { _%>
        this.itemsPerPage = ITEMS_PER_PAGE;
        this.loading = true;
        <%_ } _%>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        this.currentSearch = this.activatedRoute.snapshot && this.activatedRoute.snapshot.params['search'] ?
            this.activatedRoute.snapshot.params['search'] : '';
        <%_ } _%>
    }

    ngOnInit(): void {
<%_ if (pagination === 'no') { %>
        this.loadAll();
<%_ } _%>
<%_ if(jpaMetamodelFiltering){ _%>
    <%_ for (const relationship of relationships) { _%>
        <%_ if (relationship.ownerSide) { _%>
            <%_ relationship.clientFields.forEach((cf) => { _%>
                <%_ if (cf.lastRelationship.otherEntity.pagination !== 'no') { _%>
    this.<%= cf.name %>OptionsSubscriber = new LazySubscriber(req => this.<%= this._.lowerFirst(cf.entity.name) %>Service.query(req), this.onDestroySubject);;
             <%_ } else { _%>
    this.loadAll<%= cf.nameCapitalizedPlural %>();
              <%_ } _%>
            <%_ }) _%>
        <%_ } _%>
    <%_ } _%>
<%_ } _%>

<%_ if (pagination !== 'no') { _%>
        this.activatedRoute.queryParams.pipe(
            tap(queryParams => fillTableFromQueryParams(this.<%= entityInstance %>Table, queryParams, this.filtersDetails)),
            tap(() => this.loading = true),
        <%_ if (searchEngine === 'elasticsearch') { _%>
            switchMap(() => {
                if (this.currentSearch) {
                    this.<%= entityInstance %>Service.search(this.<%= entityInstance %>Table.filters.global.value)
                } else {
                    return this.<%= entityInstance %>Service.query(lazyLoadEventToServerQueryParams(this.<%= entityInstance %>Table.createLazyLoadMetadata(), undefined, this.filtersDetails));
                }
            }),
        <%_ } else { _%>
            switchMap(() => this.<%= entityInstance %>Service.query(lazyLoadEventToServerQueryParams(this.<%= entityInstance %>Table.createLazyLoadMetadata(), undefined, this.filtersDetails))),
            // TODO add catchError inside switchMap in blueprint
        <%_ } _%>
            filter((res: HttpResponse<I<%= entityAngularName %>[]>) => res.ok)
        ).subscribe(
            (res: HttpResponse<I<%= entityAngularName %>[]>) => {
                this.paginate<%= entityClassPlural %>(res.body!, res.headers);
                this.loading = false;
            },
            (err: HttpErrorResponse) => {
                this.onError(err.message);
                console.error(err);
                this.loading = false;
            }
        );
<%_ } _%>
    }
<%_ if (hasPaginationRelationship) { _%>
    ngOnDestroy(): void {
        this.onDestroySubject.next(undefined);
        this.onDestroySubject.complete();
    }
<%_ } _%>

    get filters(): { [s: string]: FilterMetadata } {
        return this.<%= entityInstance %>Table.filters as { [s: string]: FilterMetadata };
    }

    <%_ if (pagination === 'no') {  _%>
    loadAll(): void {
        <%_ if (searchEngine === 'elasticsearch') { _%>
        if (this.currentSearch) {
            this.<%= entityInstance %>Service.search({
                query: this.currentSearch,
                }).pipe(
                    filter((res: HttpResponse<I<%= entityAngularName %>[]>) => res.ok),
                    map((res: HttpResponse<I<%= entityAngularName %>[]>) => res.body),
                ).subscribe(
                    (res: I<%= entityAngularName %>[]) => this.<%= entityInstancePlural %> = res,
                    (res: HttpErrorResponse) => this.onError(res.message)
                );
            return;
        }
        <%_ } _%>
        this.<%= entityInstance %>Service.query().pipe(
            filter((res: HttpResponse<I<%= entityAngularName %>[]>) => res.ok),
            map((res: HttpResponse<I<%= entityAngularName %>[]>) => res.body!),
        ).subscribe(
            (<%= entityInstancePlural %>: I<%= entityAngularName %>[]) => {
                this.<%= entityInstancePlural %> = <%= entityInstancePlural %>;
            <%_ if (searchEngine === 'elasticsearch') { _%>
                this.currentSearch = '';
            <%_ } _%>
            },
            (res: HttpErrorResponse) => this.onError(res.message)
        );
    }
    <%_ } else { _%>
    onLazyLoadEvent(event: LazyLoadEvent): void {
        const queryParams = lazyLoadEventToRouterQueryParams(event, this.filtersDetails);
        this.router.navigate(['/<%= entityUrl %>'], { queryParams });
    }
    <%_ } _%>
<%_ if (!readOnly) { _%>

    delete(<%= primaryKey.fields.map(field => `${field.fieldName}: ${this.getTypescriptKeyType(field.fieldType)}`).join(', ') %>): void {
        this.confirmationService.confirm({
            header: this.translateService.instant('entity.delete.title'),
            message: this.translateService.instant('<%= i18nKeyPrefix %>.delete.question',
    { id<%- (primaryKey.fields.length === 1 && primaryKey.name === 'id') ? '' : ': `' + primaryKey.fields.map(field => '${'+field.fieldName+'}').join(" , ") + '`' %> }),
            accept: () => {
                this.<%= entityInstance %>Service.delete(<%= primaryKey.fields.map(field => `${field.fieldName}`).join(', ') %>).subscribe(() => {
    <%_ if (pagination !== 'no') { _%>
                    this.router.navigate(['/<%= entityUrl %>'], {queryParams: {r: Date.now()}, queryParamsHandling: 'merge'});
    <%_ } else { _%>
                    this.loadAll();
    <%_ } _%>
                });
            }
        });
    }
<%_ } _%>
    <%_ if(jpaMetamodelFiltering) { _%>
        <%_ for (const relationship of relationships) { _%>
            <%_ if (relationship.ownerSide) { _%>
                    <%_ relationship.clientFields.forEach(cf => { _%>
                        <%_ if (cf.lastRelationship.otherEntity.pagination === 'no') { _%>

    loadAll<%= cf.nameCapitalizedPlural %>(): void {
        this.<%= cf.lastRelationship.otherEntity.entityInstance %>Service.query()
            .subscribe((res: HttpResponse<I<%= cf.lastRelationship.otherEntity.entityAngularName %>[]>) => this.<%= cf.name %>Options = res.body);
    }
                        <%_ } else { _%>
    on<%= this._.upperFirst(cf.name) %>LazyLoadEvent(event: DropdownFilterEvent): void {
        this.<%= cf.name %>OptionsSubscriber!.filter({ first: event.first, last: event.last, '<%= cf.lastRelationship.relatedField.fieldName %>.<%= cf.relatedFieldMatchMode %>': event.filter})
    }
                        <%_ } _%>
                    <%_ }) _%>
            <%_ } _%>
        <%_ } _%>
    <%_ } _%>

    trackId(index: number, item: I<%= entityAngularName %>): <%= tsKeyType %> {
<%_ if (primaryKey.fields.length === 1) {
    // splitting cases to avoid converting number keys to string and having useless `
_%>
        return item.<%= primaryKey.name %>;
<%_ } else { _%>
        return `<%- primaryKey.fields.map(field => `\${item.${field.fieldNameDotted}}`).join(",")%>`;
<%_ } _%>
    }
    <%_ if (fieldsContainBlob) { _%>

    byteSize(field: string): string {
        return this.dataUtils.byteSize(field);
    }

    openFile(base64String: string, contentType: string | null | undefined): void {
        return this.dataUtils.openFile(base64String, contentType);
    }
    <%_ } _%>

<%_ if (pagination !== 'no') { _%>
        <%_ if (pagination === 'pagination' || pagination === 'pager') { _%>

    protected paginate<%= entityClassPlural %>(data: I<%= entityAngularName %>[], headers: HttpHeaders): void {
        <%_ if (databaseType !== 'cassandra') { _%>
        this.totalItems = Number(headers.get('X-Total-Count'));
        <%_ } _%>
        this.<%= entityInstancePlural %> = data;
    }

    <%_ } else if (pagination === 'infinite-scroll') { _%>

    protected paginate<%= entityClassPlural %>(data: I<%= entityAngularName %>[], headers: HttpHeaders): void {
        this.totalItems = Number(headers.get('X-Total-Count'));
        for (let i = 0; i < data.length; i++) {
            this.<%= entityInstancePlural %>.push(data[i]);
            }
        }
    <%_ } _%>
<%_ } _%>

    protected onError(errorMessage: string): void {
        this.messageService.add({severity:'error', summary: errorMessage});
    }
}
