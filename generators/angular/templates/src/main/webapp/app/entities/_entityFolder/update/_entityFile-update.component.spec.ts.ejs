<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const tsKeyId = this.generateTestEntityId(primaryKey.type);
const allRelationshipsByEntityNeedingOptions = Object
  .values(differentRelationships)
  .map(relationships => relationships.filter(rel => rel.ownerSide))
  .filter(relationships => relationships.length > 0);
const testEntityPrimaryKey0 = this.generateTestEntityPrimaryKey(primaryKey, 0);
const testEntityPrimaryKey1 = this.generateTestEntityPrimaryKey(primaryKey, 1);
_%>
import { sampleWithRequiredData } from '../<%= entityFileName %>.test-samples';
import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';
import { HttpResponse } from '@angular/common/http';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { FormBuilder } from '@angular/forms';
import { RouterTestingModule } from '@angular/router/testing';
import { MessageService } from 'primeng/api';
import { of } from 'rxjs';
import { DatePipe } from '@angular/common';

import { <%= entityAngularName %>UpdateComponent } from './<%= entityFileName %>-update.component';
import { <%= entityAngularName %>Service } from '../service/<%= entityFileName %>.service';
<%_ if (fields.some(f => f.fieldType === 'byte[]' && f.fieldTypeBlobContent !== 'text')) { _%>

// eslint-disable-next-line no-labels, no-unused-labels
global.fetch = jest.fn(() => Promise.resolve({
  blob: () => Promise.resolve(new Blob())
})) as any;
<%_ } _%>

describe('Component Tests', () => {
    describe('<%= entityAngularName %> Management Update Component', () => {
        let comp: <%= entityAngularName %>UpdateComponent;
        let fixture: ComponentFixture<<%= entityAngularName %>UpdateComponent>;
        let service: <%= entityAngularName %>Service;

        beforeEach(() => {
            TestBed.configureTestingModule({
                imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]),
                <%= entityAngularName %>UpdateComponent,],
                providers: [
                    FormBuilder,
                    MessageService,
                    DatePipe,
                ]
            })
            .overrideTemplate(<%= entityAngularName %>UpdateComponent, '')
            .compileComponents();

            fixture = TestBed.createComponent(<%= entityAngularName %>UpdateComponent);
            comp = fixture.componentInstance;
            Object.defineProperty(comp.editForm, 'valid', {
                get: () => true
            });
            service = TestBed.inject(<%= entityAngularName %>Service);
        });

        describe('save', () => {
            it('Should call update service on save for existing entity',
                fakeAsync(() => {
                // GIVEN
                fixture.detectChanges();
                const entity = sampleWithRequiredData ;
                jest.spyOn(service, 'update').mockReturnValue(of(new HttpResponse({ body: entity }) as any));
                comp.updateForm(entity);
                // WHEN
                comp.save();
                tick(); // simulate async

                // THEN
                    expect(service.update).toHaveBeenCalledWith(expect.objectContaining(entity));
                expect(comp.isSaving).toEqual(false);
                })
            );

            it('Should call create service on save for new entity',
                fakeAsync(() => {
                // GIVEN
                jest.spyOn(service, 'create').mockReturnValue(of(new HttpResponse({ body: sampleWithRequiredData })));
                comp.updateForm(null);
                // WHEN
                comp.save();
                    tick(); // simulate async

                // THEN
                    expect(service.create).toHaveBeenCalledWith(comp.editForm.value);
                expect(comp.isSaving).toEqual(false);
                })
            );
        });
    });
});
