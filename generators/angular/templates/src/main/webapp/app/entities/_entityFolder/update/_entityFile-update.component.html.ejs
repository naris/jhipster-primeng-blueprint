<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<div class="entity-update">
    <h2 class="title" id="<%= jhiPrefixDashed %>-<%= entityFileName %>-heading" data-cy="<%= entityClass %>CreateUpdateHeading" jhiTranslate="<%= i18nKeyPrefix %>.home.{{ <% if (!primaryKey.autoGenerate || primaryKey.derived) { %>edit<% } else { %>editForm.value.<%= primaryKey.name %> !== null<% } %> ? 'editLabel' : 'createLabel'}}">Create or edit a <%= entityClassHumanized %></h2>
    <form name="editForm" role="form" novalidate (ngSubmit)="save()" [formGroup]="editForm">
        <div class="form-grid p-fluid update-content">
<%_ for (const field of fields.filter(f => !(f.id && f.autoGenerate))) {
    const fieldName = field.fieldName;
    const fieldNameCapitalized = field.fieldNameCapitalized;
    const fieldNameHumanized = field.fieldNameHumanized;
    const fieldType = field.fieldType;
    const fieldTypeBlobContent = field.fieldTypeBlobContent;
    const id = !!field.id;
    const autoGenerate = field.autoGenerate;
    const readonly = !!field.id || !!field.readonly;
    let fieldInputType = 'text';
    let ngModelOption = '';
    const translationKey = field.fieldTranslationKey;
    if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) {
        fieldInputType = 'number';
    } else if (fieldType === 'LocalDate') {
        fieldInputType = 'date';
    } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) {
        fieldInputType = 'datetime-local';
    } else if (fieldType === 'Boolean') {
        fieldInputType = 'checkbox';
    } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') {
        fieldInputType = 'hidden';
    }
_%>
            <div class="p-field p-grid">
                <label <%= jhiPrefix %>Translate="<%= translationKey %>" for="field_<%= fieldName %>" class="p-col-12 p-md-2<% if (field.fieldValidate === true) { %> label-asterisk<% } %>"<% if (field.javadoc) { if (enableTranslation) { %> [pTooltip]="'<%= i18nKeyPrefix %>.help.<%= fieldName %>' | translate"<% } else { %> pTooltip="<%= field.javadoc %>"<% } } %>><%= fieldNameHumanized %></label>
                <div class="p-col-12 p-md-10">
    <%_ if (field.fieldIsEnum) { _%>
        <%_ const enumPrefix = frontendAppName + '.'+ fieldType; _%>
                    <p-dropdown [options]="<%= field.fieldName %>Options!" name="<%= fieldName %>" formControlName="<%= fieldName %>" id="field_<%= fieldName %>" placeholder="Choose" <%_ if(!field.fieldValidateRules || !field.fieldValidateRules.includes('required')){ %> [showClear]="true"<%_ } _%><% if (id) { %> [readonly]="edit"<% } %> data-cy="<%= fieldName %>">
                        <ng-template let-<%= field.fieldName %> pTemplate="selectedItem">{{'<%= `${enumPrefix}` %>.' + <%= field.fieldName %>.label | translate}}</ng-template>
                        <ng-template let-<%= field.fieldName %> pTemplate="item">{{'<%= `${enumPrefix}` %>.' + <%= field.fieldName %>.label | translate}}</ng-template>
                    </p-dropdown>
    <%_ } else { _%>
        <%_ if (fieldType === 'LocalDate') { _%>
                    <p-calendar id="field_<%= fieldName %>" formControlName="<%= fieldName %>" [showIcon]="true" data-cy="<%= fieldName %>"></p-calendar>
        <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                    <p-calendar id="field_<%= fieldName %>" formControlName="<%= fieldName %>" [showIcon]="true" [showTime]="true" data-cy="<%= fieldName %>"></p-calendar>
        <%_ } else if (fieldTypeBlobContent === 'text') { _%>
                    <textarea pInputTextarea name="<%= fieldName %>" id="field_<%= fieldName %>"
                                  formControlName="<%= fieldName %>" data-cy="<%= fieldName %>"></textarea>
        <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
                    <p-fileUpload name="<%= fieldName %>" id="field_<%= fieldName %>" [showUploadButton]="false" (onSelect)="onFileSelect($event, '<%= fieldName %>')"<% if (fieldTypeBlobContent === 'image') { %> accept="image/*"<% } %>
                                      (onClear)="onFileRemove('<%= fieldName %>')" (onRemove)="onFileRemove('<%= fieldName %>')" [files]="<%= fieldName %>File?[<%= fieldName %>File]:[]" data-cy="<%= fieldName %>"></p-fileUpload>
        <%_ } else if (fieldType === 'Boolean') { _%>
                    <p-inputSwitch name="<%= fieldName %>" id="field_<%= fieldName %>" formControlName="<%= fieldName %>" data-cy="<%= fieldName %>"></p-inputSwitch>
        <%_ } else { _%>
                    <input pInputText type="<%= fieldInputType %>" name="<%= fieldName %>" id="field_<%= fieldName %>" formControlName="<%= fieldName %>"<% if (id) { %> [readonly]="edit"<% } %> data-cy="<%= fieldName %>"/>
        <%_ } _%>
    <%_ } _%>
    <%_ if (field.fieldValidate === true) { _%>
                    <div class="validation-messages">
                        <ng-container *ngIf="editForm.controls.<%= fieldName %>.errors && (editForm.controls.<%= fieldName %>.dirty || editForm.controls.<%= fieldName %>.touched)">
        <%_ if (field.fieldValidateRules.includes('required')) { _%>
                            <p-message severity="error"
                                           *ngIf="editForm.controls.<%= fieldName %>.errors.required" [text]="'entity.validation.required' | translate">
                            </p-message>
        <%_ } _%>
        <%_ if (field.fieldValidateRules.includes('minlength')) { _%>
                            <p-message severity="error"
                                       *ngIf="editForm.controls.<%= fieldName %>.errors.minlength" [text]="'entity.validation.minlength' | translate : { min: <%= field.fieldValidateRulesMinlength %> }">
                            </p-message>
        <%_ } _%>
        <%_ if (field.fieldValidateRules.includes('maxlength')) { _%>
                            <p-message severity="error"
                                       *ngIf="editForm.controls.<%= fieldName %>.errors.maxlength" [text]="'entity.validation.maxlength' | translate : { max: <%= field.fieldValidateRulesMaxlength %> }">
                            </p-message>
        <%_ } _%>
        <%_ if (field.fieldValidateRules.includes('min')) { _%>
                            <p-message severity="error"
                                       *ngIf="editForm.controls.<%= fieldName %>.errors.min" [text]="'entity.validation.min' | translate : { min: <%= field.fieldValidateRulesMin %> }">
                            </p-message>
        <%_ } _%>
        <%_ if (field.fieldValidateRules.includes('max')) { _%>
                            <p-message severity="error"
                                       *ngIf="editForm.controls.<%= fieldName %>.errors.max" [text]="'entity.validation.max' | translate : { max: <%= field.fieldValidateRulesMax %> }">
                            </p-message>
        <%_ } _%>
        <%_ if (field.fieldValidateRules.includes('minbytes')) { _%>
                            <p-message severity="error"
                                       *ngIf="editForm.controls.<%= fieldName %>.errors.minbytes" [text]="'entity.validation.minbytes' | translate : { min: <%= field.fieldValidateRulesMinbytes %> }">
                            </p-message>
        <%_ } _%>
        <%_ if (field.fieldValidateRules.includes('maxbytes')) { _%>
                            <p-message severity="error"
                                       *ngIf="editForm.controls.<%= fieldName %>.errors.maxbytes" [text]="'entity.validation.maxbytes' | translate : { max: <%= field.fieldValidateRulesMaxbytes %> }">
                            </p-message>
        <%_ } _%>
        <%_ if (field.fieldValidateRules.includes('pattern')) { _%>
                            <p-message severity="error"
                                       *ngIf="editForm.controls.<%= fieldName %>.errors.pattern" [text]="'entity.validation.pattern' | translate : { pattern: '<%= fieldNameHumanized %>' }">
                            </p-message>
        <%_ } _%>
        <%_ if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal', 'Duration'].includes(fieldType)) { _%>
                            <p-message severity="error"
                                    [hidden]="!editForm.controls.<%= fieldName %>.errors.number" [text]="'entity.validation.number' | translate">
                            </p-message>
        <%_ } _%>
        <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                            <p-message severity="error"
                                    [hidden]="!editForm.controls.<%= fieldName %>.errors.ZonedDateTimelocal" [text]="'entity.validation.ZonedDateTimelocal' | translate">
                            </p-message>
        <%_ } _%>
                        </ng-container>
                </div>
    <%_ } _%>
                </div>
            </div>
<%_ } _%>
<%_ for (const relationship of relationships.filter(rel => rel.ownerSide && rel.otherEntity.primaryKey)) {
    const otherEntity = relationship.otherEntity;
    const relationshipType = relationship.relationshipType;
    const ownerSide = relationship.ownerSide;
    const otherEntityName = relationship.otherEntityName;
    const otherEntityNamePlural = relationship.otherEntityNamePlural;
    const otherEntityNameCapitalized = relationship.otherEntityNameCapitalized;
    const relationshipName = relationship.relationshipName;
    const relationshipNameHumanized = relationship.relationshipNameHumanized;
    const relationshipFieldName = relationship.relationshipFieldName;
    const relationshipFieldNamePlural = relationship.relationshipFieldNamePlural;
    const otherEntityField = relationship.otherEntityField;
    const otherEntityFieldCapitalized = relationship.otherEntityFieldCapitalized;
    const relationshipRequired = relationship.relationshipRequired;
    const translationKey = `${i18nKeyPrefix}.${relationshipName}`;
_%>
    <%_ if (relationship.relationshipManyToOne || relationship.relationshipOneToOne) { _%>
        <%- include('./relationship_form_group_template', {relationship, frontendAppName, path: [], first: true, previousRelationship: null, id: relationship.id}); -%>
    <%_ } else if (relationship.relationshipManyToMany) { _%>
            <div class="p-field p-grid">
                <label jhiTranslate="<%= translationKey %>" for="field_<%= relationshipFieldNamePlural %>" class="p-col-12 p-md-2<% if (relationshipRequired) { %> label-asterisk<% } %>"><%= relationshipNameHumanized %></label>
                <div class="p-col-12 p-md-10">
                    <p-multiSelect id="field_<%= relationshipFieldNamePlural %>" name="<%= relationshipFieldNamePlural %>" formControlName="<%=relationshipFieldNamePlural %>" dataKey="<%= otherEntity.primaryKey.name %>"<% if(relationship.otherEntity.pagination !== 'no') { %>
                                       [options]="<%= relationshipName %>OptionsSubscriber!.options" [lazy]="true" [virtualScroll]="true" [virtualScrollItemSize]="38" [lazySelectedOptions]="<%= relationship.relationshipName %>SelectedOptions!" (onLazyLoad)="on<%= otherEntityNameCapitalized %>LazyLoadEvent($event)"<% } else { %>[options]="<%= relationshipName %>Options!" <% } %>
                                       optionLabel="<%=otherEntityField %>" data-cy="<%= relationshipFieldNamePlural %>">
                    </p-multiSelect>
        <%_ if (relationshipRequired) { _%>
                    <div class="validation-messages">
                        <ng-container *ngIf="editForm.controls.<%=relationshipFieldNamePlural %>.errors && (editForm.controls.<%=relationshipFieldNamePlural %>.dirty || editForm.controls.<%=relationshipFieldNamePlural %>.touched)">
                            <p-message severity="error"
                                           *ngIf="editForm.controls.<%=relationshipFieldNamePlural %>.errors.required" [text]="'entity.validation.required' | translate">
                            </p-message>
                        </ng-container>
                    </div>
        <%_ } _%>
                </div>
            </div>
    <%_ } _%>
<%_ } _%>
        </div>

        <div class="update-buttons">
            <button pButton type="button" id="cancel-save" icon="pi pi-ban" class="p-button-secondary" (click)="previousState()" [label]="'entity.action.cancel' | translate" data-cy="entityCreateCancelButton"></button>
            <button pButton type="submit" id="save-entity" icon="pi pi-save" [disabled]="isSaving" [label]="'entity.action.save' | translate" data-cy="entityCreateSaveButton"></button>
        </div>
    </form>
</div>
