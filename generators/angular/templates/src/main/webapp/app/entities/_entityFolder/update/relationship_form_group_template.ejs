<%_
const relationshipName = relationship.relationshipName;
const newPath = [...path, relationshipName];
const dropdownId = `field_${newPath.map(this._.snakeCase).join('_')}`
const nameCapitalized = newPath.map(this._.upperFirst).join('')
const name = this._.lowerFirst(nameCapitalized)
const idField = relationship.otherEntity.fields.find(f => f.id)
const lazy = !((first && relationship.otherEntity.pagination === 'no') || !relationship.otherEntity.jpaMetamodelFiltering);
_%>
<%_ if (relationship.otherEntity.primaryKey.composite) { _%>
<ng-container formGroupName="<%= relationshipName %>">
<%_ } _%>
<%_ relationship.otherEntity.relationships.filter(r => r.id).reverse().forEach((r, i) => { _%>
    <%_
        // recursive because form groups are nested we need to finish  using a relationship before moving to the next one
        // we sue relationships....".reverse()" to have the same order as client fields (which allows the first/last) to be non filterable
    _%>
    <%- include('./relationship_form_group_template', {relationship: r, frontendAppName, path: newPath, first: (first && i === 0), previousRelationship: relationship, id}); %>
    <%_ first = false _%>
    <%_ }) _%>
    <%_ if (idField) { _%>
        <%_
            let formName;
            let controlName;
            if (relationship.otherEntity.primaryKey.composite) {
                controlName = idField.fieldName;
                formName = relationshipName + 'Form';
            } else {
                controlName = relationshipName;
                formName = previousRelationship ? previousRelationship.relationshipName + 'Form' : 'editForm';
            }
        _%>
    <div class="p-field p-grid" <% if (!first) { %>*ngIf="<%= lazy ? `${name}OptionsSubscriber!.options` : `${name}Options` %><% if (id) { %> || edit<% } %>"<% } %>>
        <label jhiTranslate="<%= `${frontendAppName}.${relationship.reference.entity.entityTranslationKey}.${relationshipName}`; %>" for="<%= dropdownId %>" class="p-col-12 p-md-2<% if (relationship.relationshipRequired) { %> label-asterisk<% } %>"><%= relationship.relationshipNameHumanized %></label>
        <div class="p-col-12 p-md-10">
            <p-dropdown id="<%= dropdownId %>" formControlName="<%= controlName %>" <% if (id) { %> [readonly]="edit"<% } %><% if(lazy) { %>
        <%_ /* this is the same (opposite) condition as relationship load template */ _%>
                        [options]="<%= name %>OptionsSubscriber!.options" [lazy]="true" [virtualScroll]="true" [virtualScrollItemSize]="38" (onLazyLoad)="on<%= nameCapitalized %>LazyLoadEvent($event)"
                        [filter]="true" [filterValue]="<%= name %>FilterValue"
                    <% } else { %>
                        [options]="<%= name %>Options!"
                    <% } %>
                        placeholder="Choose" optionLabel="<%= relationship.otherEntityField %>"<% if (relationship.otherEntity.primaryKey.composite) { %> optionValue="<%= idField.fieldName %>"<% } else { %> dataKey="<%= idField.fieldName %>"<% } %> data-cy="<%= relationshipName %>"></p-dropdown>
            <div class="validation-messages">
                <ng-container *ngIf="<%= formName %>.controls.<%=controlName %>.errors && (<%= formName %>.controls.<%=controlName %>.dirty || <%= formName %>.controls.<%=controlName %>.touched)">
                    <p-message severity="error"
                               *ngIf="<%= formName %>.controls.<%=controlName %>.errors.required" [text]="'entity.validation.required' | translate">
                    </p-message>
                </ng-container>
            </div>
        </div>
    </div>
<%_ } _%>
<%_ if (relationship.otherEntity.primaryKey.composite) { _%>
</ng-container>
<%_ } _%>
